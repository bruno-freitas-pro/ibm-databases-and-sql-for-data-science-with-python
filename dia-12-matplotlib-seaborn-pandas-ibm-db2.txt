O código abaixo roda melhor em um jupyter notebook (por exemplo, Google Colab)


### Parte 1: fazer o download dos dados e carregá-los no banco de dados ###

!curl https://storage.googleapis.com/kaggle-data-sets/2268489/3806098/bundle/archive.zip?X-Goog-Algorithm=GOOG4-RSA-SHA256&X-Goog-Credential=gcp-kaggle-com%40kaggle-161607.iam.gserviceaccount.com%2F20230124%2Fauto%2Fstorage%2Fgoog4_request&X-Goog-Date=20230124T203559Z&X-Goog-Expires=259200&X-Goog-SignedHeaders=host&X-Goog-Signature=19c24d7e2455605e3f86b22e7cdd7812ad4406405a71dd7599ee49dce0877774e32271aadfeae743e9866b5556213bf3d2e0a30591f1804c384246b18a17685fada710f81b21bba7dcd04d8fec4cc06ba586b6389b8981518f89e2b2277e89703c4dbf56ea931a6a03cb9769a0eb599834ae531c95c387e6c62ff0396b0d01aa3cdfa3dc60015f68abd65294f0c423bdb1314bd8a23416fac467fd06faf95813127ccfe7029124a712879e243153bd94e45b942c44ca7a0e34ef185ec8a60b97f6166fb58537697fa236aa7a3e231929a8940546627ec3225d74264f591d49771895b132750fb44b15822139378326e0fa49e28e05e2e7526724eeef14052148




### Parte 2: fazer o upload no Db2 ###

#Se vire!




### Parte 3: alterar o nome da primeira coluna ###

ALTER TABLE SALARIOS_DATA_SCIENCE
	RENAME COLUMN COLUMN_O TO ID;




### Parte 4: Conferir os dados que acabam de ser carregados ###

#Instalar as dependências ibm_db, ibm_db_sa, ipython-sql e trocar sqlalchemy da versão 1.4 para 1.3.24
!pip install --force-reinstall ibm_db==3.1.0 ibm_db_sa==0.3.3
!pip uninstall sqlalchemy==1.4 -y && pip install sqlalchemy==1.3.24
!pip install ipython-sql

#Importar as dependências
import ibm_db

#Informar os dados
dsn_hostname = "" # exemplo: "54a2f15b-5c0f-46df-8954-7e38e612c2bd.c1ogj3sd0tgtu0lqde00.databases.appdomain.cloud"
dsn_username = "" # exemplo: "abc12345"
dsn_password = "" # exemplo: "7dBZ3wWt9XN6$o0J"
dsn_port = ""                # e.g. "32733" 

#As quatro linhas abaixo não mudam se você estiver usando uma instância no IBM Cloud.
dsn_database = "BLUDB"            # e.g. "BLUDB"
dsn_protocol = "TCPIP"            # i.e. "TCPIP"
dsn_security = "SSL"              #i.e. "SSL"
dsn_driver = "{IBM DB2 ODBC DRIVER}"

#Daqui pra baixo, você não precisa editar o código.
#Criar a conexão ao banco de dados
dsn = (
    "DRIVER={0};"
    "DATABASE={1};"
    "HOSTNAME={2};"
    "PORT={3};"
    "PROTOCOL={4};"
    "UID={5};"
    "PWD={6};"
    "SECURITY={7};").format(dsn_driver, dsn_database, dsn_hostname, dsn_port, dsn_protocol, dsn_username, dsn_password,dsn_security)

try:
    conexao = ibm_db.connect(dsn, "", "")
    print ("Conectado ao banco de dados ", dsn_database, "usuário: ", dsn_uid, "host: ", dsn_hostname)

except:
    print ("Ocorreu um erro ao tentar conectar ao servidor: ", ibm_db.conn_errormsg())

#Instalar as dependências ibm_db, ibm_db_sa, ipython-sql e trocar sqlalchemy da versão 1.4 para 1.3.24
!pip install --force-reinstall ibm_db==3.1.0 ibm_db_sa==0.3.3
!pip uninstall sqlalchemy==1.4 -y && pip install sqlalchemy==1.3.24
!pip install ipython-sql

#Importar as dependências
import ibm_db

#Informar os dados
dsn_hostname = "" # exemplo: "54a2f15b-5c0f-46df-8954-7e38e612c2bd.c1ogj3sd0tgtu0lqde00.databases.appdomain.cloud"
dsn_username = "" # exemplo: "abc12345"
dsn_password = "" # exemplo: "7dBZ3wWt9XN6$o0J"
dsn_port = ""                # e.g. "32733" 

#As quatro linhas abaixo não mudam se você estiver usando uma instância no IBM Cloud.
dsn_database = "BLUDB"            # e.g. "BLUDB"
dsn_protocol = "TCPIP"            # i.e. "TCPIP"
dsn_security = "SSL"              #i.e. "SSL"
dsn_driver = "{IBM DB2 ODBC DRIVER}"

#Daqui pra baixo, você não precisa editar o código.
#Criar a conexão ao banco de dados
dsn = (
    "DRIVER={0};"
    "DATABASE={1};"
    "HOSTNAME={2};"
    "PORT={3};"
    "PROTOCOL={4};"
    "UID={5};"
    "PWD={6};"
    "SECURITY={7};").format(dsn_driver, dsn_database, dsn_hostname, dsn_port, dsn_protocol, dsn_username, dsn_password,dsn_security)

try:
    conexao = ibm_db.connect(dsn, "", "")
    print ("Conectado ao banco de dados ", dsn_database, "usuário: ", dsn_uid, "host: ", dsn_hostname)

except:
    print ("Ocorreu um erro ao tentar conectar ao servidor: ", ibm_db.conn_errormsg())




### Parte 5: Digitar a instrução desejada ###

#Conferir quantas linhas tem a tabela
instrucao = ibm_db.exec_immediate(conexao, 'SELECT count(*) AS "Linhas" FROM nome_da_tabela;')
ibm_db.fetch_both(instrucao)




### Parte 6: Gerar um dataframe ###

#Importar as dependencias
import pandas as pd
import ibm_db_dbi

#Disponibilizar uma conexão pro pandas
conexao_pandas = ibm_db_dbi.Connection(conexao)

Fazer a consulta ao banco de dados e salvar o resultado em um DataFrame
df = pd.read_sql('SELECT * FROM nome_da_tabela;', conexao_pandas)

#Conferir as primeiras 5 linhas, pra ver como ficaram os dados
df.head()




### Parte 7: mostrar o resumo de um DataFrame ###

#Mostrar tudo
df.describe(include='all')

#Mostrar só as colunas numéricas
df.describe()

#Mostrar só uma coluna
df.describe(include='all')["SALARY_IN_USD"]




### Parte 8: Plotar um gráfico a partir de um DataFrame, usando seaborn e matplotlib

import matplotlib.pyplot as plt
%matplotlib inline                 >>>>>>>>> Esse comando só funciona no jupyter notebook
import seaborn as sns

# Swarmplots #

#Salário em dólares será o eixo X; Nível de experiência será o eixo y
#a fonte de dados (data) é o DataFrame 'df'
plot = sns.swarmplot(x = "SALARY_IN_USD", y = "EXPERIENCE_LEVEL", data = df)

#Rotation é o ângulo das etiquetas, nesse caso do eixo X.
plt.setp(plot.get_xticklabels(), rotation=90)

#Escolher o título do gráfico
plt.title('Salário por nível')

#Imprimir o gráfico
plt.show()

#Consultar os outliers
df['SALARY_IN_USD'].describe()
idx = df['SALARY_IN_USD'].idxmax()
df.loc[idx]                         #Mostrar a linha completa
df.at[idx, 'JOB_TITLE']             #Mostrar só o cargo

#Plotar um gráfico swarmplot de salário, estratificado pelo porte da empresa
plot = sns.swarmplot(x = "SALARY_IN_USD", y = "COMPANY_SIZE", data = df)
plt.setp(plot.get_xticklabels(), rotation=90)
plt.title('Salário por tamanho da empresa')
plt.show()

# Jointplots #
plot = sns.jointplot(y = "SALARY_IN_USD", x = "REMOTE_RATIO", data = df)

# Boxplots #
plot = sns.jointplot(y = "SALARY_IN_USD", x = "REMOTE_RATIO", data = df)

plot = sns.set_style("whitegrid")
ax = sns.boxplot (x=df["SALARY_IN_USD"], y= df["EXPERIENCE_LEVEL"])
